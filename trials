#!/usr/bin/python3
"""RESTful API actions for Users in Event Hub Rental app"""
from models.user import User
from models import storage
from flask import Flask, abort, jsonify, make_response, request
from flasgger import Swagger

app = Flask(__name__)
swagger = Swagger(app)

@app.route('/users', methods=['GET'])
def get_users():
    """
    Retrieves the list of all user objects.
    ---
    responses:
      200:
        description: A list of users
    """
    all_users = storage.all(User).values()
    list_users = [user.to_dict() for user in all_users]
    return jsonify(list_users)

@app.route('/users/<user_id>', methods=['GET'])
def get_user(user_id):
    """
    Retrieves a user by ID.
    ---
    parameters:
      - name: user_id
        in: path
        type: string
        required: true
        description: The ID of the user
    responses:
      200:
        description: A user object
      404:
        description: User not found
    """
    user = storage.all(User).get(f'User.{user_id}')
    if not user:
        abort(404)
    return jsonify(user.to_dict())

@app.route('/users', methods=['POST'])
def post_user():
    """
    Creates a new user.
    ---
    parameters:
      - in: body
        name: body
        required: true
        schema:
          id: User
          required:
            - email
            - password
          properties:
            email:
              type: string
              description: The user's email
            password:
              type: string
              description: The user's password
            first_name:
              type: string
              description: The user's first name
            last_name:
              type: string
              description: The user's last name
            phone_number:
              type: string
              description: The user's phone number
            role:
              type: string
              description: The user's role
    responses:
      201:
        description: User created
      400:
        description: Invalid input
    """
    if not request.get_json():
        abort(400, description="Not a JSON")
    data = request.get_json()
    if 'email' not in data:
        abort(400, description="Missing email")
    if 'password' not in data:
        abort(400, description="Missing password")
    
    # Additional attributes for the event hub rental app
    instance = User(**data)
    instance.save()
    storage.new(instance)
    storage.save()
    return make_response(jsonify(instance.to_dict()), 201)

@app.route('/users/<user_id>', methods=['PUT'])
def put_user(user_id):
    """
    Updates an existing user.
    ---
    parameters:
      - name: user_id
        in: path
        type: string
        required: true
        description: The ID of the user
      - in: body
        name: body
        required: true
        schema:
          id: User
          properties:
            email:
              type: string
              description: The user's email
            password:
              type: string
              description: The user's password
            first_name:
              type: string
              description: The user's first name
            last_name:
              type: string
              description: The user's last name
            phone_number:
              type: string
              description: The user's phone number
            role:
              type: string
              description: The user's role
    responses:
      200:
        description: User updated
      400:
        description: Invalid input
      404:
        description: User not found
    """
    user = storage.all(User).get(f'User.{user_id}')
    if not user:
        abort(404)

    if not request.get_json():
        abort(400, description="Not a JSON")

    ignore = ['id', 'email', 'created_at', 'updated_at']

    data = request.get_json()
    for key, value in data.items():
        if key not in ignore:
            setattr(user, key, value)
    user.save()
    storage.save()
    return make_response(jsonify(user.to_dict()), 200)

@app.route('/users/<user_id>', methods=['DELETE'])
def delete_user(user_id):
    """
    Deletes a user by ID.
    ---
    parameters:
      - name: user_id
        in: path
        type: string
        required: true
        description: The ID of the user
    responses:
      200:
        description: User deleted
      404:
        description: User not found
    """
    user = storage.all(User).get(f'User.{user_id}')
    if not user:
        abort(404)
    storage.delete(user)
    storage.save()
    return make_response(jsonify({}), 200)

if __name__ == '__main__':
    app.run(debug=True)
